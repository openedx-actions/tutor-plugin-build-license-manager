#------------------------------------------------------------------------------
# Build and push a Docker image constisting of
#   - Open edX License Manager service
#
# see
#  - https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
#  - https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
#  - https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
#------------------------------------------------------------------------------
name: Open edX Tutor k8s build License Manager plugin
description: 'Use Tutor to build a Docker container of Open edX License Manager service, and upload to AWS ECR'
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  aws-ecr-repository:
    description: 'The name of the repository inside your AWS Elastic Container Registry (ECR) in which the newly created container will be uploaded and tagged. Defaults to "license-manager"'
    required: false
    default: 'license-manager'
  plugin-repository:
    description: 'Github repo containing Tutor plugin for License Manager. Default: https://github.com/lpm0073/tutor-contrib-license-manager.git'
    required: false
    default: 'https://github.com/lpm0073/tutor-contrib-license-manager.git'
  plugin-version:
    description: 'Github branch or tag. Default: master'
    required: false
    default: 'master'

outputs:
  docker-container-url:
    description: 'The URL of the AWS ECR Docker container that was created and uploaded'
    value: ${{ steps.docker-image.outputs.uri }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3.2.0

    - name: Set up Docker Buildx
      id: setup-docker
      uses: docker/setup-buildx-action@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.5.3

    # verify that the ECR repository exists. If not, then create it.
    - name: Create the AWS ECR repository
      id: create-repository
      uses: lpm0073/aws-ecr-create@v0.1.1
      with:
        aws-ecr-repository: ${{ inputs.aws-ecr-repository }}

    - name: Intialize environment variables
      id: init-env
      shell: bash
      run: |
        echo "AWS_ECR_REGISTRY_LICENSE_MANAGER=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
        echo "AWS_ECR_REPOSITORY_LICENSE_MANAGER=${{ inputs.aws-ecr-repository }}" >> $GITHUB_ENV
        echo "REPOSITORY_TAG_LICENSE_MANAGER=$TUTOR_VERSION-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: Initialize Docker image URI
      id: init-docker-image
      shell: bash
      run: |
        echo "DOCKER_IMAGE_LICENSE_MANAGER=${AWS_ECR_REGISTRY_LICENSE_MANAGER}/${AWS_ECR_REPOSITORY_LICENSE_MANAGER}:${REPOSITORY_TAG_LICENSE_MANAGER}" >> $GITHUB_ENV

    # Note: This is scaffolding. This step initialize the tutor 'env' path, which you might need
    #       if for example, you need to add Python requirements to the image
    - name: Render Tutor Config
      id: tutor-config-save
      shell: bash
      run: tutor config save --set LICENSE_MANAGER_DOCKER_IMAGE=${DOCKER_IMAGE_LICENSE_MANAGER}

    # Note: This is scaffolding. Add environment initialization stuff to this step
    #       that requires that a.) tutor is installed, and b.) the tutor environment
    #       is initialized.
    #
    #       Example: to add requirements to a build: $(tutor config printroot)/env/build/license-manager/requirements
    - name: Set Tutor-dependent environment variables
      id: tutor-environment-variables
      shell: bash
      run: |
        echo "scaffolding for Tutor-dependent environment variables"

    - name: Install plugin
      id: pip-install-plugin
      shell: bash
      run: |-
        pip install git+${{ inputs.plugin-repository  }}@${{ inputs.plugin-version }}
        tutor plugins enable license_manager
        tutor config save --set LICENSE_MANAGER_DOCKER_IMAGE=${DOCKER_IMAGE_LICENSE_MANAGER}

    - name: Build the image
      id: tutor-build-image
      shell: bash
      run: tutor images build license_manager

    - name: Push the image
      id: docker-push-image
      shell: bash
      run: |-
        tutor images push license_manager
        docker tag ${AWS_ECR_REGISTRY_CREDENTIALS}/${AWS_ECR_REPOSITORY_CREDENTIALS}:${REPOSITORY_TAG_CREDENTIALS} ${AWS_ECR_REGISTRY_CREDENTIALS}/${AWS_ECR_REPOSITORY_CREDENTIALS}:latest
        docker push ${AWS_ECR_REGISTRY_CREDENTIALS}/${AWS_ECR_REPOSITORY_CREDENTIALS}:latest

    - name: Docker image:tag
      id: docker-image
      shell: bash
      run: |
        echo "::set-output name=uri::$(echo $DOCKER_IMAGE_LICENSE_MANAGER)"
